--fufan chao hao kan
local SyncHolder = {}

SyncHolder.__syncList = {}

--objectAsKeys: 所等待的回调在的类
--callback： 所有异步操作完成后调用的回调
function SyncHolder.new(objectAsKeys, callback)
    local list = {keys = {}, args = {}, callback = callback}
    --填充keys字典
    for _, v in ipairs(objectAsKeys) do
        list.keys[v] = true
        v.syncHolder = list
    end
    list.keys.__len = #objectAsKeys

    list.setValue = function(self, objectAsKey, valueTable)
        --注入字段
        for k, v in pairs(valueTable) do
            self.args[k] = v
        end
        self.keys[objectAsKey] = nil
        self.keys.__len = self.keys.__len - 1
        --调用回调
        if self.keys.__len == 0 then
            self.keys = nil
            self:callback()
            --释放 __syncList
            SyncHolder.__syncList[callback] = nil
        end
    end
    SyncHolder.__syncList[callback] = list
    return list
end

--提前终止
function SyncHolder.abort(key)
    for k, v in pairs(SyncHolder.__syncList[key].keys) do
        k.syncHolder = nil
    end
    SyncHolder.__syncList[key] = nil
end
--return SyncHolder

fake = {}

function fake:init()
    self.syncHolder:setValue(self, {arg = 3})
end

fake2 = {}

function fake2:i()
    self.syncHolder:setValue(self, {wow = 4})
end

w =
    SyncHolder.new(
    {fake,
    fake2},
    function(self)
        print(self.args.arg)
        print(self.args.wow)
    end
)
